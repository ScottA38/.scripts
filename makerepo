#!/usr/bin/env python3

import requests
import os
from git import Repo
from getpass import getpass
import argparse
import pprint as pp
from sys import argv
import json

def setup_dir(args, url):
    """Creates a directory and intialises a new git repository inside of that new directory with a remote supplied by argument"""
    try:
        #print(args.make)
        os.mkdir(args.repository)
        bare = Repo.init(os.path.join(os.getcwd(), args.make, '.git'), bare=True)
        bare.create_remote('origin', url)
    except:
        raise Exception()

def new_repository(args, password):
    """Use POST request to make a new Github repository using supplied parameters in 'args'"""
    return requests.post('https://api.github.com/user/repos', \
    auth=(args.username, password), \
    json={"name": "{}".format(args.repository), "private": "{}".format(args.private)}, \
    timeout=5)

def new_gist(args, password):
    """Make a new gist by parsing current directory"""
    #get contents of all files in the specified directory as Python dict
    files = parse_dir()
    return requests.post('https://api.github.com/gists', \
    auth=(args.username, password), \
    json={"private": "{}".format(args.private), "files": "{}".format(json.dumps(files))}, \
    timeout=5)

def parse_dir(dir=os.getcwd()):
    """Function to inspect all files and return a dict of the file names and content"""
    files_json = {}
    try:
        for file in os.listdir(dir):
            if os.path.splitext(file)[1] in [".txt", ".md"] and not (file[0] == "." or os.path.isdir(file)):
                with open(f"{dir}/{file}", "r") as to_read:
                    files_json[file] = { "content": to_read.read() }
        return files_json
    except Exception as e:
        print(f"Failed on ${file}: ${str(e)}")

def initialise(args, password):
    try:
        new_repo_req = None
        if args.gist:
            new_repo_req = new_gist(args, password)
        else:
            new_repo_req = new_repository(args, password)

        # success case, repository is created and the URL of this repository is returned
        if new_repo_req.status_code == 201:
            url = new_repo_req.json()["html_url"]
            return url
        else:
            raise requests.exceptions.RequestException()
    except requests.exceptions.ConnectionError as err:
        print("An error occurred when trying to connect github, are you connected to the internet?")
        return False
    except requests.exceptions.RequestException:
        print("Failed, HTTP code: {}\nMessages:\n{}".format(new_repo_req.status_code, new_repo_req.json()["message"]))
        if "errors" in new_repo_req.json().keys():
            for error in new_repo_req.json()["errors"]:
                print(error["message"])
        return False


parser = argparse.ArgumentParser(description='Create a new repo on a supplied (or default) github account')
parser.add_argument('repository', help="The name of the repo to be created")
parser.add_argument("--version", action="version", version='%(prog)s 1.1')
parser.add_argument('-U', '--user', default="ScottA38", metavar="username", dest="username", help="The username of the GitHub account to store a repository to")
parser.add_argument('-p', '--private', dest="private", default= False, action='store_true', help="Flag that the created repository should be a private repository")
parser.add_argument('-m', '--make', dest="make", default= False, action='store_true', help="Whether or not the user wants to create a subdirectory with the repo name")
parser.add_argument('-G', '--gist', default=False, action='store_true', help="Whether or not the user intends to make a gist or a Github repository")
args = parser.parse_args()

user = args.username
password = ""
URL = ""

while len(password) == 0:
    print("Enter host password for user '{}':".format(user))
    password = getpass(prompt="")

URL = initialise(args, password)

if (URL):
    print(f'New repo URL is: {URL}')
else:
    raise Exception("makerepo: Failed");
if args.make and not args.gist:
    setup_dir(args, URL)
