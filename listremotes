#!/usr/bin/env python3

import requests
import argparse
from getpass import getpass

def printer(repo):
    print(repo["name"], '\t', repo["html_url"])

parser = argparse.ArgumentParser(description="List all or specified HTTP remotes on a github account (authentication required)")
parser.add_argument('repositories', nargs="*", help="Name/s of specific repositories to inspect for remote URL (optional). If omitted, list all repositories under username")
parser.add_argument("-user", default="ScottA38", metavar="username", dest="username", help="The username of the Github account to list repositories from" )
parser.add_argument("--version", action="version", version='%(prog)s 1.1')
parser.add_argument('--no-access', dest="no_access", action="store_true", help="Flag if requestee can authenticate the target Github account.\
\nIf 'False', no password prompt occurs and only public repositories will be listed for the target user.")
parser.set_defaults(no_access=False)

args = parser.parse_args()

user = args.username
password = ""
base_url = "http://api.github.com/user/repos"
urls = []

if not args.no_access:
    while len(password) == 0:
        print("Enter host password for user '{}':".format(user))
        password = getpass(prompt="")
else:
    base_url = "https://api.github.com/users/" + user + "/repos"

#test if the user has listed specific repos or not
if len(args.repositories) > 0:
    base_url = "http://api.github.com/repos/{}/".format(user)
    for repo in args.repositories:
        url = base_url + repo
        print(url)
        urls.append(base_url + repo)
else:
    urls.append(base_url)

#print(urls)

try:
    for url in urls:
        repolist = requests.get(url, auth = (user, password), timeout=5)
        if repolist.status_code == 200:
            jresp = repolist.json()
            #print(f"type of response.json() is: {type(repolist.json())}")
            if jresp.__class__.__name__ == "dict":
                printer(jresp)
            else:
                for repo in jresp:
                    printer(repo)
        else:
            #   print(repolist.text)
            raise requests.exceptions.RequestException()

except requests.exceptions.ConnectionError:
    print("An error occurred when trying to connect github, are you connected to the internet?")
except requests.exceptions.RequestException:
    print("Failed, HTTP code: {}\nMessages:\n{}".format(repolist.status_code, repolist.json()["message"]))
    if "errors" in repolist.json().keys():
        for error in repolist.json()["errors"][0]:
            print(error["message"])
